{{/* 
  chart-template/templates/statefulset-service.yaml
  This template renders:
    - A StatefulSet for the application,
    - A Standard Service,
    - A Headless Service (if enabled),
    - An Ingress (if enabled),
    - An HTTPRoute (if enabled).
*/}}

# StatefulSet configuration
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "{{ include "chart-template.fullname" . }}"
  namespace: "{{ .Values.namespace }}"
  labels:
    app.kubernetes.io/name: "{{ include "chart-template.name" . }}"
    app.kubernetes.io/instance: "{{ .Release.Name }}"
    app.kubernetes.io/version: "{{ .Chart.AppVersion }}"
    app.kubernetes.io/component: "statefulset"
    app.kubernetes.io/managed-by: "Helm"
    {{- with (default dict .Values.labels.global) }}
    {{ toYaml . | nindent 4 }}
    {{- end }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: "{{ include "chart-template.fullname" . }}"
  template:
    metadata:
      labels:
        app: "{{ include "chart-template.fullname" . }}"
        app.kubernetes.io/name: "{{ include "chart-template.name" . }}"
      annotations:
        {{- with (default dict .Values.annotations.pod) }}
        {{ toYaml . | nindent 8 }}
        {{- end }}
    spec:
      dnsPolicy: {{ .Values.dnsPolicy | default "ClusterFirst" }}
      {{- if .Values.dnsConfig.enabled | default false }}
      dnsConfig:
        options:
          {{ toYaml .Values.dnsConfig.options | nindent 10 }}
      {{- end }}

      {{- if .Values.podSecurityContext.enabled | default false }}
      securityContext:
        {{ toYaml (omit .Values.podSecurityContext "enabled") | nindent 8 }}
      {{- end }}

      {{- if .Values.affinity.enabled }}
      affinity:
        {{- if .Values.affinity.nodeAffinity }}
        nodeAffinity:
          {{- if .Values.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution }}
          requiredDuringSchedulingIgnoredDuringExecution:
            {{ toYaml .Values.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution | nindent 12 }}
          {{- end }}
          {{- if .Values.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution }}
          preferredDuringSchedulingIgnoredDuringExecution:
            {{ toYaml .Values.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution | nindent 12 }}
          {{- end }}
        {{- end }}
        {{- if .Values.affinity.podAffinity }}
        podAffinity:
          {{ toYaml .Values.affinity.podAffinity | nindent 10 }}
        {{- end }}
        {{- if .Values.affinity.podAntiAffinity }}
        podAntiAffinity:
          {{ toYaml .Values.affinity.podAntiAffinity | nindent 10 }}
        {{- end }}
      {{- end }}

      containers:
        - name: "{{ include "chart-template.fullname" . }}"
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy | default "IfNotPresent" }}
          {{- if .Values.command }}
          command: {{ toJson .Values.command }}
          {{- end }}
          {{- if .Values.args }}
          args: {{ toJson .Values.args }}
          {{- end }}
          env:
            - name: TZ
              value: "{{ .Values.timezone }}"
            {{- with .Values.env }}
            {{ toYaml . | nindent 12 }}
            {{- end }}

          {{- if .Values.envFrom }}
          envFrom:
            {{- with .Values.envFrom }}
            {{ toYaml . | nindent 12 }}
            {{- end }}
          {{- end }}

          ports:
            - name: http
              containerPort: {{ .Values.ports.targetPort }}
            {{- if .Values.ports.metricsPort }}
            - name: metrics
              containerPort: {{ .Values.ports.metricsPort }}
            {{- end }}
            {{- if .Values.ports.additionalPorts }}
            {{ toYaml .Values.ports.additionalPorts | nindent 10 }}
            {{- end }}

          {{- if .Values.probes.liveness.enabled | default false }}
          livenessProbe:
            httpGet:
              path: {{ .Values.probes.liveness.path }}
              port: {{ .Values.probes.liveness.port }}
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.liveness.timeoutSeconds }}
            failureThreshold: {{ .Values.probes.liveness.failureThreshold }}
            successThreshold: {{ .Values.probes.liveness.successThreshold }}
          {{- end }}

          {{- if .Values.probes.readiness.enabled | default false }}
          readinessProbe:
            httpGet:
              path: {{ .Values.probes.readiness.path }}
              port: {{ .Values.probes.readiness.port }}
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
            failureThreshold: {{ .Values.probes.readiness.failureThreshold }}
            successThreshold: {{ .Values.probes.readiness.successThreshold }}
          {{- end }}

          {{- if .Values.probes.startup.enabled | default false }}
          startupProbe:
            httpGet:
              path: {{ .Values.probes.startup.path }}
              port: {{ .Values.probes.startup.port }}
            initialDelaySeconds: {{ .Values.probes.startup.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.startup.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.startup.timeoutSeconds }}
            failureThreshold: {{ .Values.probes.startup.failureThreshold }}
            successThreshold: {{ .Values.probes.startup.successThreshold }}
          {{- end }}

          {{- if .Values.containerSecurityContext.enabled | default false }}
          securityContext:
            {{ toYaml (omit .Values.containerSecurityContext "enabled") | nindent 12 }}
          {{- end }}

          {{- if .Values.resources.enabled }}
          resources:
            {{- if (omit .Values.resources.requests "enabled") }}
            requests:
              {{ toYaml (omit .Values.resources.requests "enabled") | nindent 14 }}
            {{- end }}
            {{- if .Values.resources.limits }}
            limits:
              {{ toYaml (omit .Values.resources.limits "enabled") | nindent 14 }}
            {{- end }}
          {{- end }}

          volumeMounts:
            {{- if .Values.config.enabled | default false }}
            - name: config
              mountPath: "{{ .Values.config.mountPath }}"
            {{- end }}
            {{- if .Values.data.enabled | default false }}
            - name: data
              mountPath: "{{ .Values.data.mountPath }}"
            {{- end }}
            {{- if .Values.volumeMountsExtras }}
            {{ toYaml .Values.volumeMountsExtras | nindent 12 }}
            {{- end }}

      volumes:
        {{- if .Values.data.enabled | default false }}
        - name: data
          persistentVolumeClaim:
            claimName: "{{ .Values.data.claimName | default "cephfs-pvc-media" }}"
        {{- end }}
        {{- if .Values.volumesExtras }}
        {{ toYaml .Values.volumesExtras | nindent 8 }}
        {{- end }}
      tolerations:
        {{- if .Values.tolerations }}
        {{ toYaml .Values.tolerations | nindent 8 }}
        {{- end }}
  {{- if .Values.config.enabled | default false }}
  volumeClaimTemplates:
    - metadata:
        name: config
        labels:
          app: "{{ include "chart-template.fullname" . }}"
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: "{{ .Values.config.storageSize | default "100Mi" }}"
        storageClassName: "{{ .Values.config.storageClassName | default "cephfs-csi-sc-retain" }}"
  {{- end }}

---

# Standard Service
{{- if or (.Values.gateway.enabled | default false) (.Values.ingress.enabled | default false) }}
apiVersion: v1
kind: Service
metadata:
  name: "{{ include "chart-template.fullname" . }}-service"
  namespace: "{{ .Values.namespace }}"
  labels:
    app.kubernetes.io/name: "{{ include "chart-template.name" . }}"
    app.kubernetes.io/instance: "{{ .Release.Name }}"
spec:
  {{ include "chart-template.ipFamilies" . | nindent 2 }}
  selector:
    app: "{{ include "chart-template.fullname" . }}"
  ports:
    - name: http
      protocol: TCP
      port: {{ .Values.ports.servicePort }}
      targetPort: {{ .Values.ports.targetPort }}
  type: ClusterIP
{{- end }}

---

# Headless Service
{{- if .Values.headless.enabled | default false }}
apiVersion: v1
kind: Service
metadata:
  name: "{{ include "chart-template.fullname" . }}-headless"
  namespace: "{{ .Values.namespace }}"
  labels:
    app.kubernetes.io/name: "{{ include "chart-template.name" . }}"
    app.kubernetes.io/instance: "{{ .Release.Name }}"
spec:
  clusterIP: None
  {{ include "chart-template.ipFamilies" . | nindent 2 }}
  selector:
    {{- if .Values.headless.selector }}
    {{ toYaml .Values.headless.selector | nindent 4 }}
    {{- else }}
    app: "{{ include "chart-template.fullname" . }}"
    {{- end }}
  ports:
    - name: http
      port: {{ .Values.ports.servicePort }}
      targetPort: {{ .Values.ports.targetPort }}
{{- end }}

---

# Ingress Configuration
{{- if .Values.ingress.enabled | default false }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: "{{ include "chart-template.fullname" . }}-ingress"
  namespace: "{{ .Values.namespace }}"
  annotations:
    kubernetes.io/ingress.class: "{{ .Values.ingress.className }}"
    cert-manager.io/cluster-issuer: "{{ .Values.ingress.tls.certManagerIssuer }}"
spec:
  tls:
    - hosts:
        - "{{ printf "%s.%s" (include "chart-template.fullname" .) (default "sulibot.com" .Values.gateway.domain) }}"
      secretName: "{{ include "chart-template.fullname" . }}-tls"
  rules:
    - host: "{{ printf "%s.%s" (include "chart-template.fullname" .) (default "sulibot.com" .Values.gateway.domain) }}"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: "{{ include "chart-template.fullname" . }}-service"
                port:
                  number: {{ .Values.ports.servicePort }}
{{- end }}

---

# HTTPRoute Configuration
{{- if .Values.gateway.enabled | default false }}
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: {{ include "chart-template.fullname" . }}-route
  namespace: {{ .Values.gateway.namespace }}
  labels:
    app.kubernetes.io/name: {{ include "chart-template.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
    app.kubernetes.io/component: httproute
  annotations: {}
spec:
  parentRefs:
    - name: {{ .Values.gateway.name }}
      namespace: {{ .Values.gateway.namespace }}
  hostnames:
    - {{ .Values.name }}.{{ .Values.gateway.domain }}
    {{- range .Values.gateway.additionalHostnames }}
    - {{ . }}.{{ $.Values.gateway.domain }}
    {{- end }}
  rules:
    - matches:
        - path:
            type: PathPrefix
            value: /
      backendRefs:
        - name: "{{ include "chart-template.fullname" . }}-service"
          namespace: "{{ .Values.namespace }}"
          port: {{ .Values.ports.servicePort }}
{{- end }}
