{{- /* 
Statefulset-Service Template

This template renders:
1) A StatefulSet for the application.
2) A Standard Service (if .Values.gateway.enabled or .Values.ingress.enabled).
3) A Headless Service (if .Values.headless.enabled).
4) An Ingress (if .Values.ingress.enabled).
5) Gateway API routes (HTTPRoute/TCPRoute/UDPRoute) if .Values.gateway.enabled.

Ports Configuration:
Ports are defined in `.Values.ports`. For example:
  - name: web-ui
    targetPort: 3000       # Container port.
    servicePort: 80        # Port exposed by the Service.
    protocol: HTTP         # Defaults to HTTP if omitted (treated as TCP).
    sectionName: web-listener   # (Optional) target a specific Gateway listener.
  - name: admin
    targetPort: 8443
    servicePort: 8443
    protocol: UDP
    sectionName: admin-listener
  - name: stream
    targetPort: 9443
    servicePort: 9443
    protocol: TCP

If no port name is provided, a default of "port-<index>" is generated.
If servicePort is omitted, that port is not exposed externally.
*/ -}}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "{{ include "chart-template.fullname" . }}"
  namespace: "{{ include "chart-template.namespace" . }}"
  labels:
    {{- include "chart-template.labels" . | nindent 4 }}
    {{- with (default dict .Values.labels.global) }}
    {{ toYaml . | nindent 4 }}
    {{- end }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: "{{ include "chart-template.fullname" . }}"
  template:
    metadata:
      labels:
        app: "{{ include "chart-template.fullname" . }}"
        {{- include "chart-template.labels" . | nindent 8 }}
      annotations:
        {{- with (default dict .Values.annotations.pod) }}
        {{ toYaml . | nindent 8 }}
        {{- end }}
    spec:
      dnsPolicy: {{ .Values.dnsPolicy | default "ClusterFirst" }}
      {{- if .Values.dnsConfig.enabled }}
      dnsConfig:
        options:
          {{ toYaml .Values.dnsConfig.options | nindent 10 }}
      {{- end }}
      {{- if .Values.podSecurityContext.enabled }}
      securityContext:
        {{ toYaml (omit .Values.podSecurityContext "enabled") | nindent 8 }}
      {{- end }}
      {{- if .Values.affinity.enabled }}
      affinity:
        {{- if .Values.affinity.nodeAffinity }}
        nodeAffinity:
          {{- if .Values.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution }}
          requiredDuringSchedulingIgnoredDuringExecution:
            {{ toYaml .Values.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution | nindent 12 }}
          {{- end }}
          {{- if .Values.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution }}
          preferredDuringSchedulingIgnoredDuringExecution:
            {{ toYaml .Values.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution | nindent 12 }}
          {{- end }}
        {{- end }}
        {{- if .Values.affinity.podAffinity }}
        podAffinity:
          {{ toYaml .Values.affinity.podAffinity | nindent 10 }}
        {{- end }}
        {{- if .Values.affinity.podAntiAffinity }}
        podAntiAffinity:
          {{ toYaml .Values.affinity.podAntiAffinity | nindent 10 }}
        {{- end }}
      {{- end }}
      containers:
        - name: "{{ include "chart-template.fullname" . }}"
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy | default "IfNotPresent" }}
          {{- if .Values.command }}
          command: {{ toJson .Values.command }}
          {{- end }}
          {{- if .Values.args }}
          args: {{ toJson .Values.args }}
          {{- end }}
          env:
            - name: TZ
              value: "{{ .Values.timezone }}"
            {{- with .Values.env }}
            {{ toYaml . | nindent 12 }}
            {{- end }}
          {{- if .Values.envFrom }}
          envFrom:
            {{- with .Values.envFrom }}
            {{ toYaml . | nindent 12 }}
            {{- end }}
          {{- end }}
          ports:
            {{- $ports := .Values.ports | default list -}}
            {{- if $ports }}
              {{- range $index, $p := $ports }}
              - name: {{ $p.name | default (printf "port-%d" $index) }}
                containerPort: {{ required (printf "Error: .Values.ports[%d].targetPort is required" $index) $p.targetPort }}
                protocol: {{ if and $p.protocol (eq (upper $p.protocol) "UDP") }}UDP{{ else }}TCP{{ end }}
              {{- end }}
            {{- else }}
              {{- fail "Error: .Values.ports is empty or missing, check your values.yaml" }}
            {{- end }}
          {{- if .Values.probes.liveness.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.probes.liveness.path }}
              port: {{ .Values.probes.liveness.port }}
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.liveness.timeoutSeconds }}
            failureThreshold: {{ .Values.probes.liveness.failureThreshold }}
            successThreshold: {{ .Values.probes.liveness.successThreshold }}
          {{- end }}
          {{- if .Values.probes.readiness.enabled }}
          readinessProbe:
            httpGet:
              path: {{ .Values.probes.readiness.path }}
              port: {{ .Values.probes.readiness.port }}
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
            failureThreshold: {{ .Values.probes.readiness.failureThreshold }}
            successThreshold: {{ .Values.probes.readiness.successThreshold }}
          {{- end }}
          {{- if .Values.probes.startup.enabled }}
          startupProbe:
            httpGet:
              path: {{ .Values.probes.startup.path }}
              port: {{ .Values.probes.startup.port }}
            initialDelaySeconds: {{ .Values.probes.startup.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.startup.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.startup.timeoutSeconds }}
            failureThreshold: {{ .Values.probes.startup.failureThreshold }}
            successThreshold: {{ .Values.probes.startup.successThreshold }}
          {{- end }}
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext:
            {{ toYaml (omit .Values.containerSecurityContext "enabled") | nindent 12 }}
          {{- end }}
          {{- if .Values.resources.enabled }}
          resources:
            {{- if (omit .Values.resources.requests "enabled") }}
            requests:
              {{ toYaml (omit .Values.resources.requests "enabled") | nindent 14 }}
            {{- end }}
            {{- if .Values.resources.limits }}
            limits:
              {{ toYaml (omit .Values.resources.limits "enabled") | nindent 14 }}
            {{- end }}
          {{- end }}
          volumeMounts:
            {{- if .Values.config.enabled }}
            - name: config
              mountPath: "{{ .Values.config.mountPath }}"
            {{- end }}
            {{- if .Values.data.enabled }}
            - name: data
              mountPath: "{{ .Values.data.mountPath }}"
            {{- end }}
            {{- if .Values.volumeMountsExtras }}
            {{ toYaml .Values.volumeMountsExtras | nindent 12 }}
            {{- end }}
      volumes:
        {{- if .Values.data.enabled }}
        - name: data
          persistentVolumeClaim:
            claimName: "{{ .Values.data.claimName | default "cephfs-pvc-media" }}"
        {{- end }}
        {{- if .Values.volumesExtras }}
        {{ toYaml .Values.volumesExtras | nindent 8 }}
        {{- end }}
      tolerations:
        {{- if .Values.tolerations }}
        {{ toYaml .Values.tolerations | nindent 8 }}
        {{- end }}
  {{- if .Values.config.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: config
        labels:
          app: "{{ include "chart-template.fullname" . }}"
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: "{{ .Values.config.storageSize | default "100Mi" }}"
        storageClassName: "{{ .Values.config.storageClassName | default "cephfs-csi-sc-retain" }}"
  {{- end }}
---
{{/* -------------------------------
      2) STANDARD SERVICE (if enabled)
   ------------------------------- */}}
{{- if or (.Values.gateway.enabled) (.Values.ingress.enabled) }}
apiVersion: v1
kind: Service
metadata:
  name: "{{ include "chart-template.fullname" . }}-service"
  namespace: "{{ include "chart-template.namespace" . }}"
  labels:
    {{- include "chart-template.labels" . | nindent 4 }}
spec:
  type: ClusterIP
  {{ include "chart-template.ipFamilies" . | nindent 2 }}
  selector:
    app: "{{ include "chart-template.fullname" . }}"
  ports:
    {{- $ports := .Values.ports | default (list) -}}
    {{- range $index, $p := $ports }}
    {{- if $p.servicePort }}
    - name: {{ $p.name | default (printf "port-%d" $index) }}
      protocol: {{ if eq (upper $p.protocol) "UDP" }}"UDP"{{ else }}"TCP"{{ end }}
      port: {{ $p.servicePort }}
      targetPort: {{ $p.targetPort }}
    {{- end }}
    {{- end }}
{{- end }}
---
{{/* -------------------------------
      3) HEADLESS SERVICE (if enabled)
   ------------------------------- */}}
{{- if .Values.headless.enabled }}
apiVersion: v1
kind: Service
metadata:
  name: "{{ include "chart-template.fullname" . }}-headless"
  namespace: "{{ include "chart-template.namespace" . }}"
  labels:
    {{- include "chart-template.labels" . | nindent 4 }}
spec:
  clusterIP: None
  {{ include "chart-template.ipFamilies" . | nindent 2 }}
  selector:
    app: "{{ include "chart-template.fullname" . }}"
  ports:
    {{- $ports := .Values.ports | default (list) -}}
    {{- range $index, $p := $ports }}
    {{- if $p.servicePort }}
    - name: {{ $p.name | default (printf "port-%d" $index) }}
      protocol: {{ if eq (upper $p.protocol) "UDP" }}"UDP"{{ else }}"TCP"{{ end }}
      port: {{ $p.servicePort }}
      targetPort: {{ $p.targetPort }}
    {{- end }}
    {{- end }}
{{- end }}
---
{{/* -------------------------------
      4) INGRESS (if enabled)
   ------------------------------- */}}
{{- if .Values.ingress.enabled }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: "{{ include "chart-template.fullname" . }}-ingress"
  namespace: "{{ include "chart-template.namespace" . }}"
  annotations:
    kubernetes.io/ingress.class: "{{ .Values.ingress.className }}"
    cert-manager.io/cluster-issuer: "{{ .Values.ingress.tls.certManagerIssuer }}"
spec:
  {{- $mainHost := printf "%s.%s" $.Release.Name $.Values.gateway.domain }}  # Use root scope ($)
  {{- $allHosts := list $mainHost }}
  {{- range $.Values.gateway.additionalFQDNHostnames }}
    {{- $allHosts = append $allHosts . }}
  {{- end }}
  {{- range $h := $allHosts }}
  - {{ $h }}
  {{- end }}


  tls:
    - hosts:
        {{- range $h := $allHosts }}
        - {{ $h }}
        {{- end }}
      secretName: "{{ include "chart-template.fullname" . }}-tls"
  rules:
    {{- range $h := $allHosts }}
    - host: {{ $h }}
      http:
        paths:
          {{- $ports := .Values.ports | default (list) -}}
          {{- range $index, $p := $ports }}
          {{- if $p.servicePort }}
          {{- $proto := $p.protocol | default "HTTP" | upper }}
          {{- if eq $proto "HTTP" }}
          - path: {{ if eq (int $p.servicePort) 80 }}"/"{{ else }}{{ printf "/%s" ($p.name | default (printf "port-%d" $index)) }}{{ end }}
            pathType: Prefix
            backend:
              service:
                name: "{{ include "chart-template.fullname" . }}-service"
                port:
                  number: {{ $p.servicePort }}
          {{- end }}
          {{- end }}
          {{- end }}
    {{- end }}
{{- end }}
---
{{/* -------------------------------
      5) GATEWAY API ROUTES (if gateway enabled)
         Generate:
           - HTTPRoute for HTTP ports,
           - TCPRoute for TCP ports,
           - UDPRoute for UDP ports.
   ------------------------------- */}}
{{- if $.Values.gateway.enabled }}
{{- $ports := .Values.ports | default (list) -}}
{{- $httpPorts := list -}}
{{- $tcpPorts := list -}}
{{- $udpPorts := list -}}
{{- range $index, $p := $ports }}
  {{- $proto := $p.protocol | default "HTTP" | upper -}}
  {{- if eq $proto "HTTP" }}
    {{- $httpPorts = append $httpPorts $p -}}
  {{- else if eq $proto "TCP" }}
    {{- $tcpPorts = append $tcpPorts $p -}}
  {{- else if eq $proto "UDP" }}
    {{- $udpPorts = append $udpPorts $p -}}
  {{- else }}
    {{- $httpPorts = append $httpPorts $p -}}
  {{- end }}
{{- end }}

{{/* 5a) HTTPRoute for HTTP ports */}}
{{- if gt (len $httpPorts) 0 }}
{{- range $index, $p := $httpPorts }}
---
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: "{{ include "chart-template.fullname" $ }}"
  namespace: "{{ include "chart-template.namespace" $ }}"
  labels:
    {{- include "chart-template.labels" $ | nindent 4 }}
    app.kubernetes.io/component: "httproute"
spec:
  parentRefs:
    - name: {{ $.Values.gateway.name }}
      namespace: "{{ $.Values.gateway.namespace }}"
      {{- if $p.sectionName }}
      sectionName: {{ $p.sectionName }}
      {{- end }}
  hostnames:
    {{- $mainHost := printf "%s.%s" $.Release.Name $.Values.gateway.domain }} 
    {{- $allHosts := list $mainHost }}
    {{- range $.Values.gateway.additionalFQDNHostnames }}
      {{- $allHosts = append $allHosts . }}
    {{- end }}
    {{- range $h := $allHosts }}
    - {{ $h }}
    {{- end }}



  rules:
    - matches:
        - path:
            type: PathPrefix
            value: {{ if eq (int $p.servicePort) 80 }}"/"{{ else }}{{ printf "/%s" ($p.name | default (printf "port-%d" $index)) }}{{ end }}
      backendRefs:
        - name: "{{ include "chart-template.fullname" $ }}-service"
          namespace: "{{ include "chart-template.namespace" $ }}"
          port: {{ $p.servicePort }}
{{- end }}
{{- end }}

{{/* 5b) TCPRoute for TCP ports */}}
{{- if gt (len $tcpPorts) 0 }}
{{- range $index, $p := $tcpPorts }}
---
apiVersion: gateway.networking.k8s.io/v1alpha2
kind: TCPRoute
metadata:
  name: "{{ include "chart-template.fullname" $ }}-tcp-{{ $p.name | default (printf "port-%d" $index) }}"
  namespace: "{{ include "chart-template.namespace" $ }}"
  labels:
    {{- include "chart-template.labels" $ | nindent 4 }}
    app.kubernetes.io/component: "tcproute"
spec:
  parentRefs:
    - name: {{ $.Values.gateway.name }}
      namespace: "{{ $.Values.gateway.namespace }}"
      {{- if $p.sectionName }}
      sectionName: {{ $p.sectionName }}
      {{- end }}
  rules:
    - backendRefs:
        - name: "{{ include "chart-template.fullname" $ }}-service"
          namespace: "{{ include "chart-template.namespace" $ }}"
          port: {{ $p.servicePort }}
{{- end }}
{{- end }}

{{/* 5c) UDPRoute for UDP ports */}}
{{- if gt (len $udpPorts) 0 }}
{{- range $index, $p := $udpPorts }}
---
apiVersion: gateway.networking.k8s.io/v1alpha2
kind: UDPRoute
metadata:
  name: "{{ include "chart-template.fullname" $ }}-udp-{{ $p.name | default (printf "port-%d" $index) }}"
  namespace: "{{ include "chart-template.namespace" $ }}"
  labels:
    {{- include "chart-template.labels" $ | nindent 4 }}
    app.kubernetes.io/component: "udproute"
spec:
  parentRefs:
    - name: {{ $.Values.gateway.name }}
      namespace: "{{ $.Values.gateway.namespace }}"
      {{- if $p.sectionName }}
      sectionName: {{ $p.sectionName }}
      {{- end }}
  rules:
    - backendRefs:
        - name: "{{ include "chart-template.fullname" $ }}-service"
          namespace: "{{ include "chart-template.namespace" $ }}"
          port: {{ $p.servicePort }}
{{- end }}
{{- end }}
{{- end }}
